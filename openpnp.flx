var debug = true;

var FLXARMS16Z10Util = Packages.flx.ide.flxarms16z10.FLXARMS16Z10Util;
var VectorUtilities = Packages.flx.util.VectorUtilities;

/**********************
 * OPENPNP COMMANDS
 **********************/

function connect_command(){
    if(debug){
        print('connect_command');
    }

    return success();
}

function enable_command(){
    if(debug){
        print('enable_command');
    }

    return success();
}

function disable_command(){
    if(debug){
        print('disable_command');
    }

    return success();
}

function home_command(){
    if(debug){
        print('home_command');
    }

    return success();
}

function move_to_command(){
    if(debug){
        print('move_to_command');
        if(x) print('x: '+x);
        if (y) print('y: '+y);
        if (z) print('z: '+z);
        if (rotation) print('rotation: '+rotation);
        if(feedrate) print('feedrate: '+feedrate);
    }

    var machineWorkspace = FLX.getWorkspace();
    
    var workspaceMachine = machineWorkspace.getMachine("ALLY");
    
    if(!workspaceMachine)
    {
        return error("Machine not defined");
    }
    
    var workspacePoint = VectorUtilities.getVector(x, y, z);
    
    var util = new FLXARMS16Z10Util(machineWorkspace, workspaceMachine);
    
    try{
        var operation = util.createMoveWorkspaceOperation(workspacePoint, feedrate/60.0);
        
        if(!util.runBlockingWaitOperation(operation))
        {
            return error("Move Failed");
        }
    }catch(ex)
    {
        return error(ex);
    }

    return success();
}

function pick_command(){
    if(debug){
        print('pick_command');
    }

    return success();
}

function place_command(){
    if(debug){
        print('place_command');
    }

    return success();
}

function pump_on_command(){
    if(debug){
        print('pump_on_command');
    }

    return success();
}

function pump_off_command(){
    if(debug){
        print('pump_off_command');
    }

    return success();
}

function actuate_boolean_command(){
    if(debug){
        print('actuate_boolean_command');
    }

    return success();
}

function actuate_double_command(){
    if(debug){
        print('actuate_double_command');
    }

    return success();
}

function actuator_read_command(){
    if(debug){
        print('actuator_read_command');
    }

    return success();
}

function post_vision_home_command(){
    if(debug){
        print('post_vision_home_command');
    }

    return success();
}

function pre_dispense_command(){
    if(debug){
        print('pre_dispense_command');
    }

    return success();
}

function dispense_command(){
    if(debug){
        print('dispense_command');
    }

    return success();
}

function post_dispense_command(){
    if(debug){
        print('post_dispense_command');
    }

    return success();
}

/**********************
 * UTILITY FUNCTIONS
 **********************/

function success()
{
    return "ok";
}

function error(msg)
{
    print('error');
    print(msg);
    return "error";   
}